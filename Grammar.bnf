
Stilts File := ($Imports $Declarations) | ($Shebang $Imports)

/////////////
// Shebang //
/////////////

Shebang     := #! $Path



/////////////
// Imports //
/////////////

Imports     := $Import | $Import $Imports

Import      := import $StrLiteral ; | ε

StrLiteral  := TODO



////////////////////////////
// Top Level Declarations //
////////////////////////////

Declarations   := $Declaration | $Declaration $Declarations | ε

Declaration    := $VarDecl | $FunctionDecl | $StructDecl | $ClassDecl | $InterfaceDecl

VarDecl        := $Typename $VarIdent = $Expr

FunctionDecl   := $TypeKeyword $FunctionIdent ( $FunctionParameters ) $FunctionBody
		
StructDecl     := struct $ContainerIdent

ClassDecl      := class $ContainerIdent

InterfaceDecl  := interface $ContainerIdent

EnumDecl       := enum $ContainerIdent $EnumBody


////////////
// Bodies //
////////////

FunctionBody   := { $Statement* $ReturnStatement }

StructBody     := { TODO }

ClassBody      := { TODO }

InterfaceBody  := { TODO }

EnumBody       := { $EnumInnerBody }
EnumInnerBody  := $EnumItem | $EnumItem , $EnumInnerBody | ε
EnumItem       := $ContainerIdent

ControlBody    := { $Statement* }


/////////////////////////////////
// Statements and Control Flow //
/////////////////////////////////

ControlStatement := $ForStatement | $WhileStatement

ForStatement     := for ( $VarDecl ; $Expr ; $Statement) $ControlBody

WhileStatement   := while ( $Expr ) $ControlBody

ReturnStatement  := return $Expr ;



///////////
// Types //
///////////

# Type keyword and any number of stars
Type           := $TypeKeyword \**

TypeKeyword    := bool | char | uchar | short | ushort | int | uint | long | ulong | float | double | void

Typename       := $TypeKeyword | $VarIdent | $ContainerIdent 

EnumDecl       := TODO 



/////////////////
// Identifiers //
/////////////////
// It will be clear if something is a type name, a local variable, or a function.

VarIdent       := [...snake_case...]

ContainerIdent := [...CapitalCase...]

FunctonIdent   := [...camelCase...]



////////////////
// Specifiers //
////////////////










/////////////////
// Expressions //
/////////////////

LambadaExpression := ( $FunctionParameters ) $FunctionBody

ListExpression    := [ $ListItems ]

ListComprehension := [ $Expr ]



//////////////
// Literals //
//////////////


///////////
// Other //
///////////

WS            := \w | \n | \r | \r\n

