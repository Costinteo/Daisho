#!/usr/bin/python3
import re
import os
import sys
import shutil
import sysconfig
import subprocess
from shlex import split
from os import chdir as cd
from glob import glob


def pwd():
    return print(os.getcwd)


def printpurple(s, end=os.linesep):
    print("\x1b[35m" + s + "\x1b[0m", end=end)


def run_np(s, end=os.linesep):
    subprocess.run(split(s), check=True)


def run(s, end=os.linesep):
    printpurple("\x1b[35m" + s + "\x1b[0m", end=end)
    run_np(s, end)


def mkdir(s):
    try:
        os.mkdir(s)
    except OSError:
        pass


def rm(s):
    try:  # File
        os.remove(s)
    except:  # Directory
        shutil.rmtree(s)


os.system("")  # Enables escape sequences on windows lmao


def heading(s):
    print("\x1b[31m" + s + "\x1b[0m")


cc = "cc"

"""
flags = ""
flags += subprocess.check_output(['python3-config', '--cflags', '--embed']).decode('utf-8')   + " "
flags += subprocess.check_output(['python3-config', '--includes', '--embed']).decode('utf-8') + " "
flags += subprocess.check_output(['python3-config', '--libs', '--embed']).decode('utf-8')     + " "
flags += subprocess.check_output(['python3-config', '--ldflags', '--embed']).decode('utf-8')  + " "
flags += "-g -O0 -I/usr/include/python3.9 -I/usr/include/x86_64-linux-gnu/python3.9 -lpthread -lm -fsanitize=address -DMEMDEBUG=1"
"""


# Gather up all the flags I think I need
pyinc = ""     # Include flags for Python
libs = ""      # Libraries for Python
pyarch = ""    # Archive for static linking to Python
opts = ""      # Misc options
warnings = ""  # Always maximum warnings.

pyinc += "".join(['-I%s ' % (dir,)
                 for dir in sysconfig.get_config_var('INCLDIRSTOMAKE').split(" ")])

libs += "".join(['-L%s ' % (dir,)
                for dir in sysconfig.get_config_var('LIBDIR').split(" ")])
libs += sysconfig.get_config_var('MODLIBS') + " "
libs += sysconfig.get_config_var('LIBS') + " "
libs += sysconfig.get_config_var('SYSLIBS')

pyarch += sysconfig.get_config_var("LIBPL") + "/"
pyarch += sysconfig.get_config_var("LIBRARY") + " "

opts = sysconfig.get_config_var('OPT')

warnings = "-Wall -Wextra -Wpedantic"

flags = f"{libs} {pyinc} {opts} {warnings} -fPIE"
flags = re.sub(" +", " ", flags)


def compile(script, exename):
    run(f'{cc} {flags} {script} {pyarch} -o {exename}')


scripts = []


def buildTests():
    heading("Building stiltc.")
    cd('..')
    run('./rungenerators.sh')
    run('./install.sh')
    cd('tests/')
    print()

    heading("Building C test scripts.")
    mkdir('bin/')
    for script in glob('scripts/*.c'):
        exename = f"bin/{script[len('scripts/'):len(script)-2]}"
        scripts.append((script, exename))
        compile(script, exename)
    print()

    heading("Copying Python test scripts.")
    for script in glob('scripts/*.py'):
        exename = f"bin/{script[len('scripts/'):len(script)-3]}"
        scripts.append((script, exename))

        run(f'cp {script} {exename}', end="")
        print("\x1b[35m && \x1b[0m", end="")
        run(f'chmod +x {exename}')
    print()


def runTests():
    # Run the test scripts.
    heading("Running test scripts")
    try:
        for p in scripts:
            printpurple(p[0])
            run_np(p[1])
            print()
    except:
        print("FAIL")
        exit(1)


def cleanTests():
    rm('bin/')
    pass


if (len(sys.argv) > 1):
    taken = False
    if 'run' in sys.argv:
        buildTests()
        runTests()
        taken = True
    if 'clean' in sys.argv:
        cleanTests()
        taken = True
    if taken:
        exit(0)
buildTests()
runTests()
cleanTests()
