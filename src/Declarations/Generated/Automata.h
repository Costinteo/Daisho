// THIS FILE GENERATED BY GenTokType.py. DO NOT EDIT.
#ifndef INCLUDE_AUTOMATA
#define INCLUDE_AUTOMATA
#include <apaz-libc.h>
#include "../../UTF-8.h"


/*
 * This file (Generated by GenTokTypes.py, edits will be overwritten) contains a set of 
 * rules for Stilts's NFA-based tokenizer.
 *
 * Every type of Stilts token is represented by a single deterministic finite automaton.
 * Each automaton reads one character of the imput at a time. If the character matches a 
 * transition rule (start_range and end_range are both inclusive) and the DFA is currently 
 * in the matching start_state, then it will change state to the corresponding end_state. 
 *
 * There may be multiple transition rules that match. Ties are broken by taking the first 
 * applicable transition. If no transition rule applies, the DFA transitions into the 0 
 * state, which is non-accepting, and no further input will be processed.
 *
 * Tokenization continues until one of the following:
 *   One or less of the DFAs are accepting
 *   The end of the file is reached.
 * At this point, we rewind to the last position where a DFA was accepting, and break any 
 * ties. We take that token, add it to the token stream, advance our position in the file, 
 * and continue for the next token. If there's no token to add because we're at the end of 
 * the file, or some type of syntax error occurred where there is no valid token to add, 
 * we stop processing and either end the token stream with the END_OF_FILE token, or throw 
 * an error.
 */


typedef uint8_t NFAState;
#define NFASTATE_MAX UINT8_MAX

TYPE_DECLARE(DFARule);
struct DFARule {
  // Start and end are inclusive
  utf8_t start_range; utf8_t end_range;
  NFAState start_state;
  NFAState end_state;
};

TYPE_DECLARE(DFA);
struct DFA {
  const DFARule* const rules;
  size_t num_rules;
  NFAState accepting_state;
};

/***************/
/* Exact Rules */
/***************/
#define NATIVE_rule_1 = { .start_range = 'n', .end_range = 'n', .start_state = 1, .end_state = 2 };
#define NATIVE_rule_2 = { .start_range = 'a', .end_range = 'a', .start_state = 2, .end_state = 3 };
#define NATIVE_rule_3 = { .start_range = 't', .end_range = 't', .start_state = 3, .end_state = 4 };
#define NATIVE_rule_4 = { .start_range = 'i', .end_range = 'i', .start_state = 4, .end_state = 5 };
#define NATIVE_rule_5 = { .start_range = 'v', .end_range = 'v', .start_state = 5, .end_state = 6 };
#define NATIVE_rule_6 = { .start_range = 'e', .end_range = 'e', .start_state = 6, .end_state = 7 };
DFARule NATIVE_rules[] = { NATIVE_rule_1, NATIVE_rule_2, NATIVE_rule_3, NATIVE_rule_4, NATIVE_rule_5, NATIVE_rule_6 };
DFA NATIVE_DFA = { .rules = NATIVE_rules, .num_rules = ARR_SIZE(NATIVE_rules), .accepting_state = 7 };

#define CTYPE_rule_1 = { .start_range = 'c', .end_range = 'c', .start_state = 1, .end_state = 2 };
#define CTYPE_rule_2 = { .start_range = 't', .end_range = 't', .start_state = 2, .end_state = 3 };
#define CTYPE_rule_3 = { .start_range = 'y', .end_range = 'y', .start_state = 3, .end_state = 4 };
#define CTYPE_rule_4 = { .start_range = 'p', .end_range = 'p', .start_state = 4, .end_state = 5 };
#define CTYPE_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };
DFARule CTYPE_rules[] = { CTYPE_rule_1, CTYPE_rule_2, CTYPE_rule_3, CTYPE_rule_4, CTYPE_rule_5 };
DFA CTYPE_DFA = { .rules = CTYPE_rules, .num_rules = ARR_SIZE(CTYPE_rules), .accepting_state = 6 };

#define BOOL_rule_1 = { .start_range = 'B', .end_range = 'B', .start_state = 1, .end_state = 2 };
#define BOOL_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
#define BOOL_rule_3 = { .start_range = 'o', .end_range = 'o', .start_state = 3, .end_state = 4 };
#define BOOL_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };
DFARule BOOL_rules[] = { BOOL_rule_1, BOOL_rule_2, BOOL_rule_3, BOOL_rule_4 };
DFA BOOL_DFA = { .rules = BOOL_rules, .num_rules = ARR_SIZE(BOOL_rules), .accepting_state = 5 };

#define CHAR_rule_1 = { .start_range = 'C', .end_range = 'C', .start_state = 1, .end_state = 2 };
#define CHAR_rule_2 = { .start_range = 'h', .end_range = 'h', .start_state = 2, .end_state = 3 };
#define CHAR_rule_3 = { .start_range = 'a', .end_range = 'a', .start_state = 3, .end_state = 4 };
#define CHAR_rule_4 = { .start_range = 'r', .end_range = 'r', .start_state = 4, .end_state = 5 };
DFARule CHAR_rules[] = { CHAR_rule_1, CHAR_rule_2, CHAR_rule_3, CHAR_rule_4 };
DFA CHAR_DFA = { .rules = CHAR_rules, .num_rules = ARR_SIZE(CHAR_rules), .accepting_state = 5 };

#define UCHAR_rule_1 = { .start_range = 'U', .end_range = 'U', .start_state = 1, .end_state = 2 };
#define UCHAR_rule_2 = { .start_range = 'C', .end_range = 'C', .start_state = 2, .end_state = 3 };
#define UCHAR_rule_3 = { .start_range = 'h', .end_range = 'h', .start_state = 3, .end_state = 4 };
#define UCHAR_rule_4 = { .start_range = 'a', .end_range = 'a', .start_state = 4, .end_state = 5 };
#define UCHAR_rule_5 = { .start_range = 'r', .end_range = 'r', .start_state = 5, .end_state = 6 };
DFARule UCHAR_rules[] = { UCHAR_rule_1, UCHAR_rule_2, UCHAR_rule_3, UCHAR_rule_4, UCHAR_rule_5 };
DFA UCHAR_DFA = { .rules = UCHAR_rules, .num_rules = ARR_SIZE(UCHAR_rules), .accepting_state = 6 };

#define SHORT_rule_1 = { .start_range = 'S', .end_range = 'S', .start_state = 1, .end_state = 2 };
#define SHORT_rule_2 = { .start_range = 'h', .end_range = 'h', .start_state = 2, .end_state = 3 };
#define SHORT_rule_3 = { .start_range = 'o', .end_range = 'o', .start_state = 3, .end_state = 4 };
#define SHORT_rule_4 = { .start_range = 'r', .end_range = 'r', .start_state = 4, .end_state = 5 };
#define SHORT_rule_5 = { .start_range = 't', .end_range = 't', .start_state = 5, .end_state = 6 };
DFARule SHORT_rules[] = { SHORT_rule_1, SHORT_rule_2, SHORT_rule_3, SHORT_rule_4, SHORT_rule_5 };
DFA SHORT_DFA = { .rules = SHORT_rules, .num_rules = ARR_SIZE(SHORT_rules), .accepting_state = 6 };

#define USHORT_rule_1 = { .start_range = 'U', .end_range = 'U', .start_state = 1, .end_state = 2 };
#define USHORT_rule_2 = { .start_range = 'S', .end_range = 'S', .start_state = 2, .end_state = 3 };
#define USHORT_rule_3 = { .start_range = 'h', .end_range = 'h', .start_state = 3, .end_state = 4 };
#define USHORT_rule_4 = { .start_range = 'o', .end_range = 'o', .start_state = 4, .end_state = 5 };
#define USHORT_rule_5 = { .start_range = 'r', .end_range = 'r', .start_state = 5, .end_state = 6 };
#define USHORT_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };
DFARule USHORT_rules[] = { USHORT_rule_1, USHORT_rule_2, USHORT_rule_3, USHORT_rule_4, USHORT_rule_5, USHORT_rule_6 };
DFA USHORT_DFA = { .rules = USHORT_rules, .num_rules = ARR_SIZE(USHORT_rules), .accepting_state = 7 };

#define INT_rule_1 = { .start_range = 'I', .end_range = 'I', .start_state = 1, .end_state = 2 };
#define INT_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };
#define INT_rule_3 = { .start_range = 't', .end_range = 't', .start_state = 3, .end_state = 4 };
DFARule INT_rules[] = { INT_rule_1, INT_rule_2, INT_rule_3 };
DFA INT_DFA = { .rules = INT_rules, .num_rules = ARR_SIZE(INT_rules), .accepting_state = 4 };

#define UINT_rule_1 = { .start_range = 'U', .end_range = 'U', .start_state = 1, .end_state = 2 };
#define UINT_rule_2 = { .start_range = 'I', .end_range = 'I', .start_state = 2, .end_state = 3 };
#define UINT_rule_3 = { .start_range = 'n', .end_range = 'n', .start_state = 3, .end_state = 4 };
#define UINT_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
DFARule UINT_rules[] = { UINT_rule_1, UINT_rule_2, UINT_rule_3, UINT_rule_4 };
DFA UINT_DFA = { .rules = UINT_rules, .num_rules = ARR_SIZE(UINT_rules), .accepting_state = 5 };

#define LONG_rule_1 = { .start_range = 'L', .end_range = 'L', .start_state = 1, .end_state = 2 };
#define LONG_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
#define LONG_rule_3 = { .start_range = 'n', .end_range = 'n', .start_state = 3, .end_state = 4 };
#define LONG_rule_4 = { .start_range = 'g', .end_range = 'g', .start_state = 4, .end_state = 5 };
DFARule LONG_rules[] = { LONG_rule_1, LONG_rule_2, LONG_rule_3, LONG_rule_4 };
DFA LONG_DFA = { .rules = LONG_rules, .num_rules = ARR_SIZE(LONG_rules), .accepting_state = 5 };

#define FLOAT_rule_1 = { .start_range = 'F', .end_range = 'F', .start_state = 1, .end_state = 2 };
#define FLOAT_rule_2 = { .start_range = 'l', .end_range = 'l', .start_state = 2, .end_state = 3 };
#define FLOAT_rule_3 = { .start_range = 'o', .end_range = 'o', .start_state = 3, .end_state = 4 };
#define FLOAT_rule_4 = { .start_range = 'a', .end_range = 'a', .start_state = 4, .end_state = 5 };
#define FLOAT_rule_5 = { .start_range = 't', .end_range = 't', .start_state = 5, .end_state = 6 };
DFARule FLOAT_rules[] = { FLOAT_rule_1, FLOAT_rule_2, FLOAT_rule_3, FLOAT_rule_4, FLOAT_rule_5 };
DFA FLOAT_DFA = { .rules = FLOAT_rules, .num_rules = ARR_SIZE(FLOAT_rules), .accepting_state = 6 };

#define DOUBLE_rule_1 = { .start_range = 'D', .end_range = 'D', .start_state = 1, .end_state = 2 };
#define DOUBLE_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
#define DOUBLE_rule_3 = { .start_range = 'u', .end_range = 'u', .start_state = 3, .end_state = 4 };
#define DOUBLE_rule_4 = { .start_range = 'b', .end_range = 'b', .start_state = 4, .end_state = 5 };
#define DOUBLE_rule_5 = { .start_range = 'l', .end_range = 'l', .start_state = 5, .end_state = 6 };
#define DOUBLE_rule_6 = { .start_range = 'e', .end_range = 'e', .start_state = 6, .end_state = 7 };
DFARule DOUBLE_rules[] = { DOUBLE_rule_1, DOUBLE_rule_2, DOUBLE_rule_3, DOUBLE_rule_4, DOUBLE_rule_5, DOUBLE_rule_6 };
DFA DOUBLE_DFA = { .rules = DOUBLE_rules, .num_rules = ARR_SIZE(DOUBLE_rules), .accepting_state = 7 };

#define VOID_rule_1 = { .start_range = 'V', .end_range = 'V', .start_state = 1, .end_state = 2 };
#define VOID_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
#define VOID_rule_3 = { .start_range = 'i', .end_range = 'i', .start_state = 3, .end_state = 4 };
#define VOID_rule_4 = { .start_range = 'd', .end_range = 'd', .start_state = 4, .end_state = 5 };
DFARule VOID_rules[] = { VOID_rule_1, VOID_rule_2, VOID_rule_3, VOID_rule_4 };
DFA VOID_DFA = { .rules = VOID_rules, .num_rules = ARR_SIZE(VOID_rules), .accepting_state = 5 };

#define IF_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
#define IF_rule_2 = { .start_range = 'f', .end_range = 'f', .start_state = 2, .end_state = 3 };
DFARule IF_rules[] = { IF_rule_1, IF_rule_2 };
DFA IF_DFA = { .rules = IF_rules, .num_rules = ARR_SIZE(IF_rules), .accepting_state = 3 };

#define ELSE_rule_1 = { .start_range = 'e', .end_range = 'e', .start_state = 1, .end_state = 2 };
#define ELSE_rule_2 = { .start_range = 'l', .end_range = 'l', .start_state = 2, .end_state = 3 };
#define ELSE_rule_3 = { .start_range = 's', .end_range = 's', .start_state = 3, .end_state = 4 };
#define ELSE_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };
DFARule ELSE_rules[] = { ELSE_rule_1, ELSE_rule_2, ELSE_rule_3, ELSE_rule_4 };
DFA ELSE_DFA = { .rules = ELSE_rules, .num_rules = ARR_SIZE(ELSE_rules), .accepting_state = 5 };

#define FOR_rule_1 = { .start_range = 'f', .end_range = 'f', .start_state = 1, .end_state = 2 };
#define FOR_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
#define FOR_rule_3 = { .start_range = 'r', .end_range = 'r', .start_state = 3, .end_state = 4 };
DFARule FOR_rules[] = { FOR_rule_1, FOR_rule_2, FOR_rule_3 };
DFA FOR_DFA = { .rules = FOR_rules, .num_rules = ARR_SIZE(FOR_rules), .accepting_state = 4 };

#define WHILE_rule_1 = { .start_range = 'w', .end_range = 'w', .start_state = 1, .end_state = 2 };
#define WHILE_rule_2 = { .start_range = 'h', .end_range = 'h', .start_state = 2, .end_state = 3 };
#define WHILE_rule_3 = { .start_range = 'i', .end_range = 'i', .start_state = 3, .end_state = 4 };
#define WHILE_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };
#define WHILE_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };
DFARule WHILE_rules[] = { WHILE_rule_1, WHILE_rule_2, WHILE_rule_3, WHILE_rule_4, WHILE_rule_5 };
DFA WHILE_DFA = { .rules = WHILE_rules, .num_rules = ARR_SIZE(WHILE_rules), .accepting_state = 6 };

#define CONTINUE_rule_1 = { .start_range = 'c', .end_range = 'c', .start_state = 1, .end_state = 2 };
#define CONTINUE_rule_2 = { .start_range = 'o', .end_range = 'o', .start_state = 2, .end_state = 3 };
#define CONTINUE_rule_3 = { .start_range = 'n', .end_range = 'n', .start_state = 3, .end_state = 4 };
#define CONTINUE_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
#define CONTINUE_rule_5 = { .start_range = 'i', .end_range = 'i', .start_state = 5, .end_state = 6 };
#define CONTINUE_rule_6 = { .start_range = 'n', .end_range = 'n', .start_state = 6, .end_state = 7 };
#define CONTINUE_rule_7 = { .start_range = 'u', .end_range = 'u', .start_state = 7, .end_state = 8 };
#define CONTINUE_rule_8 = { .start_range = 'e', .end_range = 'e', .start_state = 8, .end_state = 9 };
DFARule CONTINUE_rules[] = { CONTINUE_rule_1, CONTINUE_rule_2, CONTINUE_rule_3, CONTINUE_rule_4, CONTINUE_rule_5, CONTINUE_rule_6, CONTINUE_rule_7, CONTINUE_rule_8 };
DFA CONTINUE_DFA = { .rules = CONTINUE_rules, .num_rules = ARR_SIZE(CONTINUE_rules), .accepting_state = 9 };

#define BREAK_rule_1 = { .start_range = 'b', .end_range = 'b', .start_state = 1, .end_state = 2 };
#define BREAK_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
#define BREAK_rule_3 = { .start_range = 'e', .end_range = 'e', .start_state = 3, .end_state = 4 };
#define BREAK_rule_4 = { .start_range = 'a', .end_range = 'a', .start_state = 4, .end_state = 5 };
#define BREAK_rule_5 = { .start_range = 'k', .end_range = 'k', .start_state = 5, .end_state = 6 };
DFARule BREAK_rules[] = { BREAK_rule_1, BREAK_rule_2, BREAK_rule_3, BREAK_rule_4, BREAK_rule_5 };
DFA BREAK_DFA = { .rules = BREAK_rules, .num_rules = ARR_SIZE(BREAK_rules), .accepting_state = 6 };

#define IN_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
#define IN_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };
DFARule IN_rules[] = { IN_rule_1, IN_rule_2 };
DFA IN_DFA = { .rules = IN_rules, .num_rules = ARR_SIZE(IN_rules), .accepting_state = 3 };

#define CLASS_rule_1 = { .start_range = 'c', .end_range = 'c', .start_state = 1, .end_state = 2 };
#define CLASS_rule_2 = { .start_range = 'l', .end_range = 'l', .start_state = 2, .end_state = 3 };
#define CLASS_rule_3 = { .start_range = 'a', .end_range = 'a', .start_state = 3, .end_state = 4 };
#define CLASS_rule_4 = { .start_range = 's', .end_range = 's', .start_state = 4, .end_state = 5 };
#define CLASS_rule_5 = { .start_range = 's', .end_range = 's', .start_state = 5, .end_state = 6 };
DFARule CLASS_rules[] = { CLASS_rule_1, CLASS_rule_2, CLASS_rule_3, CLASS_rule_4, CLASS_rule_5 };
DFA CLASS_DFA = { .rules = CLASS_rules, .num_rules = ARR_SIZE(CLASS_rules), .accepting_state = 6 };

#define THIS_rule_1 = { .start_range = 't', .end_range = 't', .start_state = 1, .end_state = 2 };
#define THIS_rule_2 = { .start_range = 'h', .end_range = 'h', .start_state = 2, .end_state = 3 };
#define THIS_rule_3 = { .start_range = 'i', .end_range = 'i', .start_state = 3, .end_state = 4 };
#define THIS_rule_4 = { .start_range = 's', .end_range = 's', .start_state = 4, .end_state = 5 };
DFARule THIS_rules[] = { THIS_rule_1, THIS_rule_2, THIS_rule_3, THIS_rule_4 };
DFA THIS_DFA = { .rules = THIS_rules, .num_rules = ARR_SIZE(THIS_rules), .accepting_state = 5 };

#define OPERATOR_rule_1 = { .start_range = 'o', .end_range = 'o', .start_state = 1, .end_state = 2 };
#define OPERATOR_rule_2 = { .start_range = 'p', .end_range = 'p', .start_state = 2, .end_state = 3 };
#define OPERATOR_rule_3 = { .start_range = 'e', .end_range = 'e', .start_state = 3, .end_state = 4 };
#define OPERATOR_rule_4 = { .start_range = 'r', .end_range = 'r', .start_state = 4, .end_state = 5 };
#define OPERATOR_rule_5 = { .start_range = 'a', .end_range = 'a', .start_state = 5, .end_state = 6 };
#define OPERATOR_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };
#define OPERATOR_rule_7 = { .start_range = 'o', .end_range = 'o', .start_state = 7, .end_state = 8 };
#define OPERATOR_rule_8 = { .start_range = 'r', .end_range = 'r', .start_state = 8, .end_state = 9 };
DFARule OPERATOR_rules[] = { OPERATOR_rule_1, OPERATOR_rule_2, OPERATOR_rule_3, OPERATOR_rule_4, OPERATOR_rule_5, OPERATOR_rule_6, OPERATOR_rule_7, OPERATOR_rule_8 };
DFA OPERATOR_DFA = { .rules = OPERATOR_rules, .num_rules = ARR_SIZE(OPERATOR_rules), .accepting_state = 9 };

#define TRAIT_rule_1 = { .start_range = 't', .end_range = 't', .start_state = 1, .end_state = 2 };
#define TRAIT_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
#define TRAIT_rule_3 = { .start_range = 'a', .end_range = 'a', .start_state = 3, .end_state = 4 };
#define TRAIT_rule_4 = { .start_range = 'i', .end_range = 'i', .start_state = 4, .end_state = 5 };
#define TRAIT_rule_5 = { .start_range = 't', .end_range = 't', .start_state = 5, .end_state = 6 };
DFARule TRAIT_rules[] = { TRAIT_rule_1, TRAIT_rule_2, TRAIT_rule_3, TRAIT_rule_4, TRAIT_rule_5 };
DFA TRAIT_DFA = { .rules = TRAIT_rules, .num_rules = ARR_SIZE(TRAIT_rules), .accepting_state = 6 };

#define IMPL_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
#define IMPL_rule_2 = { .start_range = 'm', .end_range = 'm', .start_state = 2, .end_state = 3 };
#define IMPL_rule_3 = { .start_range = 'p', .end_range = 'p', .start_state = 3, .end_state = 4 };
#define IMPL_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };
DFARule IMPL_rules[] = { IMPL_rule_1, IMPL_rule_2, IMPL_rule_3, IMPL_rule_4 };
DFA IMPL_DFA = { .rules = IMPL_rules, .num_rules = ARR_SIZE(IMPL_rules), .accepting_state = 5 };

#define ENUM_rule_1 = { .start_range = 'e', .end_range = 'e', .start_state = 1, .end_state = 2 };
#define ENUM_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };
#define ENUM_rule_3 = { .start_range = 'u', .end_range = 'u', .start_state = 3, .end_state = 4 };
#define ENUM_rule_4 = { .start_range = 'm', .end_range = 'm', .start_state = 4, .end_state = 5 };
DFARule ENUM_rules[] = { ENUM_rule_1, ENUM_rule_2, ENUM_rule_3, ENUM_rule_4 };
DFA ENUM_DFA = { .rules = ENUM_rules, .num_rules = ARR_SIZE(ENUM_rules), .accepting_state = 5 };

#define PRIVATE_rule_1 = { .start_range = 'p', .end_range = 'p', .start_state = 1, .end_state = 2 };
#define PRIVATE_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
#define PRIVATE_rule_3 = { .start_range = 'i', .end_range = 'i', .start_state = 3, .end_state = 4 };
#define PRIVATE_rule_4 = { .start_range = 'v', .end_range = 'v', .start_state = 4, .end_state = 5 };
#define PRIVATE_rule_5 = { .start_range = 'a', .end_range = 'a', .start_state = 5, .end_state = 6 };
#define PRIVATE_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };
#define PRIVATE_rule_7 = { .start_range = 'e', .end_range = 'e', .start_state = 7, .end_state = 8 };
DFARule PRIVATE_rules[] = { PRIVATE_rule_1, PRIVATE_rule_2, PRIVATE_rule_3, PRIVATE_rule_4, PRIVATE_rule_5, PRIVATE_rule_6, PRIVATE_rule_7 };
DFA PRIVATE_DFA = { .rules = PRIVATE_rules, .num_rules = ARR_SIZE(PRIVATE_rules), .accepting_state = 8 };

#define PROTECTED_rule_1 = { .start_range = 'p', .end_range = 'p', .start_state = 1, .end_state = 2 };
#define PROTECTED_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
#define PROTECTED_rule_3 = { .start_range = 'o', .end_range = 'o', .start_state = 3, .end_state = 4 };
#define PROTECTED_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
#define PROTECTED_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };
#define PROTECTED_rule_6 = { .start_range = 'c', .end_range = 'c', .start_state = 6, .end_state = 7 };
#define PROTECTED_rule_7 = { .start_range = 't', .end_range = 't', .start_state = 7, .end_state = 8 };
#define PROTECTED_rule_8 = { .start_range = 'e', .end_range = 'e', .start_state = 8, .end_state = 9 };
#define PROTECTED_rule_9 = { .start_range = 'd', .end_range = 'd', .start_state = 9, .end_state = 10 };
DFARule PROTECTED_rules[] = { PROTECTED_rule_1, PROTECTED_rule_2, PROTECTED_rule_3, PROTECTED_rule_4, PROTECTED_rule_5, PROTECTED_rule_6, PROTECTED_rule_7, PROTECTED_rule_8, PROTECTED_rule_9 };
DFA PROTECTED_DFA = { .rules = PROTECTED_rules, .num_rules = ARR_SIZE(PROTECTED_rules), .accepting_state = 10 };

#define PUBLIC_rule_1 = { .start_range = 'p', .end_range = 'p', .start_state = 1, .end_state = 2 };
#define PUBLIC_rule_2 = { .start_range = 'u', .end_range = 'u', .start_state = 2, .end_state = 3 };
#define PUBLIC_rule_3 = { .start_range = 'b', .end_range = 'b', .start_state = 3, .end_state = 4 };
#define PUBLIC_rule_4 = { .start_range = 'l', .end_range = 'l', .start_state = 4, .end_state = 5 };
#define PUBLIC_rule_5 = { .start_range = 'i', .end_range = 'i', .start_state = 5, .end_state = 6 };
#define PUBLIC_rule_6 = { .start_range = 'c', .end_range = 'c', .start_state = 6, .end_state = 7 };
DFARule PUBLIC_rules[] = { PUBLIC_rule_1, PUBLIC_rule_2, PUBLIC_rule_3, PUBLIC_rule_4, PUBLIC_rule_5, PUBLIC_rule_6 };
DFA PUBLIC_DFA = { .rules = PUBLIC_rules, .num_rules = ARR_SIZE(PUBLIC_rules), .accepting_state = 7 };

#define INSTANCEOF_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
#define INSTANCEOF_rule_2 = { .start_range = 'n', .end_range = 'n', .start_state = 2, .end_state = 3 };
#define INSTANCEOF_rule_3 = { .start_range = 's', .end_range = 's', .start_state = 3, .end_state = 4 };
#define INSTANCEOF_rule_4 = { .start_range = 't', .end_range = 't', .start_state = 4, .end_state = 5 };
#define INSTANCEOF_rule_5 = { .start_range = 'a', .end_range = 'a', .start_state = 5, .end_state = 6 };
#define INSTANCEOF_rule_6 = { .start_range = 'n', .end_range = 'n', .start_state = 6, .end_state = 7 };
#define INSTANCEOF_rule_7 = { .start_range = 'c', .end_range = 'c', .start_state = 7, .end_state = 8 };
#define INSTANCEOF_rule_8 = { .start_range = 'e', .end_range = 'e', .start_state = 8, .end_state = 9 };
#define INSTANCEOF_rule_9 = { .start_range = 'o', .end_range = 'o', .start_state = 9, .end_state = 10 };
#define INSTANCEOF_rule_10 = { .start_range = 'f', .end_range = 'f', .start_state = 10, .end_state = 11 };
DFARule INSTANCEOF_rules[] = { INSTANCEOF_rule_1, INSTANCEOF_rule_2, INSTANCEOF_rule_3, INSTANCEOF_rule_4, INSTANCEOF_rule_5, INSTANCEOF_rule_6, INSTANCEOF_rule_7, INSTANCEOF_rule_8, INSTANCEOF_rule_9, INSTANCEOF_rule_10 };
DFA INSTANCEOF_DFA = { .rules = INSTANCEOF_rules, .num_rules = ARR_SIZE(INSTANCEOF_rules), .accepting_state = 11 };

#define SIZEOF_rule_1 = { .start_range = 's', .end_range = 's', .start_state = 1, .end_state = 2 };
#define SIZEOF_rule_2 = { .start_range = 'i', .end_range = 'i', .start_state = 2, .end_state = 3 };
#define SIZEOF_rule_3 = { .start_range = 'z', .end_range = 'z', .start_state = 3, .end_state = 4 };
#define SIZEOF_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };
#define SIZEOF_rule_5 = { .start_range = 'o', .end_range = 'o', .start_state = 5, .end_state = 6 };
#define SIZEOF_rule_6 = { .start_range = 'f', .end_range = 'f', .start_state = 6, .end_state = 7 };
DFARule SIZEOF_rules[] = { SIZEOF_rule_1, SIZEOF_rule_2, SIZEOF_rule_3, SIZEOF_rule_4, SIZEOF_rule_5, SIZEOF_rule_6 };
DFA SIZEOF_DFA = { .rules = SIZEOF_rules, .num_rules = ARR_SIZE(SIZEOF_rules), .accepting_state = 7 };

#define ASSERT_rule_1 = { .start_range = 'a', .end_range = 'a', .start_state = 1, .end_state = 2 };
#define ASSERT_rule_2 = { .start_range = 's', .end_range = 's', .start_state = 2, .end_state = 3 };
#define ASSERT_rule_3 = { .start_range = 's', .end_range = 's', .start_state = 3, .end_state = 4 };
#define ASSERT_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };
#define ASSERT_rule_5 = { .start_range = 'r', .end_range = 'r', .start_state = 5, .end_state = 6 };
#define ASSERT_rule_6 = { .start_range = 't', .end_range = 't', .start_state = 6, .end_state = 7 };
DFARule ASSERT_rules[] = { ASSERT_rule_1, ASSERT_rule_2, ASSERT_rule_3, ASSERT_rule_4, ASSERT_rule_5, ASSERT_rule_6 };
DFA ASSERT_DFA = { .rules = ASSERT_rules, .num_rules = ARR_SIZE(ASSERT_rules), .accepting_state = 7 };

#define TRUE_rule_1 = { .start_range = 't', .end_range = 't', .start_state = 1, .end_state = 2 };
#define TRUE_rule_2 = { .start_range = 'r', .end_range = 'r', .start_state = 2, .end_state = 3 };
#define TRUE_rule_3 = { .start_range = 'u', .end_range = 'u', .start_state = 3, .end_state = 4 };
#define TRUE_rule_4 = { .start_range = 'e', .end_range = 'e', .start_state = 4, .end_state = 5 };
DFARule TRUE_rules[] = { TRUE_rule_1, TRUE_rule_2, TRUE_rule_3, TRUE_rule_4 };
DFA TRUE_DFA = { .rules = TRUE_rules, .num_rules = ARR_SIZE(TRUE_rules), .accepting_state = 5 };

#define FALSE_rule_1 = { .start_range = 'f', .end_range = 'f', .start_state = 1, .end_state = 2 };
#define FALSE_rule_2 = { .start_range = 'a', .end_range = 'a', .start_state = 2, .end_state = 3 };
#define FALSE_rule_3 = { .start_range = 'l', .end_range = 'l', .start_state = 3, .end_state = 4 };
#define FALSE_rule_4 = { .start_range = 's', .end_range = 's', .start_state = 4, .end_state = 5 };
#define FALSE_rule_5 = { .start_range = 'e', .end_range = 'e', .start_state = 5, .end_state = 6 };
DFARule FALSE_rules[] = { FALSE_rule_1, FALSE_rule_2, FALSE_rule_3, FALSE_rule_4, FALSE_rule_5 };
DFA FALSE_DFA = { .rules = FALSE_rules, .num_rules = ARR_SIZE(FALSE_rules), .accepting_state = 6 };

#define LPAREN_rule_1 = { .start_range = '(', .end_range = '(', .start_state = 1, .end_state = 2 };
DFARule LPAREN_rules[] = { LPAREN_rule_1 };
DFA LPAREN_DFA = { .rules = LPAREN_rules, .num_rules = ARR_SIZE(LPAREN_rules), .accepting_state = 2 };

#define RPAREN_rule_1 = { .start_range = ')', .end_range = ')', .start_state = 1, .end_state = 2 };
DFARule RPAREN_rules[] = { RPAREN_rule_1 };
DFA RPAREN_DFA = { .rules = RPAREN_rules, .num_rules = ARR_SIZE(RPAREN_rules), .accepting_state = 2 };

#define LBRACE_rule_1 = { .start_range = '{', .end_range = '{', .start_state = 1, .end_state = 2 };
DFARule LBRACE_rules[] = { LBRACE_rule_1 };
DFA LBRACE_DFA = { .rules = LBRACE_rules, .num_rules = ARR_SIZE(LBRACE_rules), .accepting_state = 2 };

#define RBRACE_rule_1 = { .start_range = '}', .end_range = '}', .start_state = 1, .end_state = 2 };
DFARule RBRACE_rules[] = { RBRACE_rule_1 };
DFA RBRACE_DFA = { .rules = RBRACE_rules, .num_rules = ARR_SIZE(RBRACE_rules), .accepting_state = 2 };

#define LBRACK_rule_1 = { .start_range = '[', .end_range = '[', .start_state = 1, .end_state = 2 };
DFARule LBRACK_rules[] = { LBRACK_rule_1 };
DFA LBRACK_DFA = { .rules = LBRACK_rules, .num_rules = ARR_SIZE(LBRACK_rules), .accepting_state = 2 };

#define RBRACK_rule_1 = { .start_range = ']', .end_range = ']', .start_state = 1, .end_state = 2 };
DFARule RBRACK_rules[] = { RBRACK_rule_1 };
DFA RBRACK_DFA = { .rules = RBRACK_rules, .num_rules = ARR_SIZE(RBRACK_rules), .accepting_state = 2 };

#define LARROW_rule_1 = { .start_range = '<', .end_range = '<', .start_state = 1, .end_state = 2 };
DFARule LARROW_rules[] = { LARROW_rule_1 };
DFA LARROW_DFA = { .rules = LARROW_rules, .num_rules = ARR_SIZE(LARROW_rules), .accepting_state = 2 };

#define RARROW_rule_1 = { .start_range = '>', .end_range = '>', .start_state = 1, .end_state = 2 };
DFARule RARROW_rules[] = { RARROW_rule_1 };
DFA RARROW_DFA = { .rules = RARROW_rules, .num_rules = ARR_SIZE(RARROW_rules), .accepting_state = 2 };

#define SEMI_rule_1 = { .start_range = ';', .end_range = ';', .start_state = 1, .end_state = 2 };
DFARule SEMI_rules[] = { SEMI_rule_1 };
DFA SEMI_DFA = { .rules = SEMI_rules, .num_rules = ARR_SIZE(SEMI_rules), .accepting_state = 2 };

#define COMMA_rule_1 = { .start_range = ',', .end_range = ',', .start_state = 1, .end_state = 2 };
DFARule COMMA_rules[] = { COMMA_rule_1 };
DFA COMMA_DFA = { .rules = COMMA_rules, .num_rules = ARR_SIZE(COMMA_rules), .accepting_state = 2 };

#define DOT_rule_1 = { .start_range = '.', .end_range = '.', .start_state = 1, .end_state = 2 };
DFARule DOT_rules[] = { DOT_rule_1 };
DFA DOT_DFA = { .rules = DOT_rules, .num_rules = ARR_SIZE(DOT_rules), .accepting_state = 2 };

#define STAR_rule_1 = { .start_range = '*', .end_range = '*', .start_state = 1, .end_state = 2 };
DFARule STAR_rules[] = { STAR_rule_1 };
DFA STAR_DFA = { .rules = STAR_rules, .num_rules = ARR_SIZE(STAR_rules), .accepting_state = 2 };

#define EQUALS_rule_1 = { .start_range = '=', .end_range = '=', .start_state = 1, .end_state = 2 };
DFARule EQUALS_rules[] = { EQUALS_rule_1 };
DFA EQUALS_DFA = { .rules = EQUALS_rules, .num_rules = ARR_SIZE(EQUALS_rules), .accepting_state = 2 };

#define LAMBDA_ARROW_rule_1 = { .start_range = '=', .end_range = '=', .start_state = 1, .end_state = 2 };
#define LAMBDA_ARROW_rule_2 = { .start_range = '>', .end_range = '>', .start_state = 2, .end_state = 3 };
DFARule LAMBDA_ARROW_rules[] = { LAMBDA_ARROW_rule_1, LAMBDA_ARROW_rule_2 };
DFA LAMBDA_ARROW_DFA = { .rules = LAMBDA_ARROW_rules, .num_rules = ARR_SIZE(LAMBDA_ARROW_rules), .accepting_state = 3 };

#define BANG_rule_1 = { .start_range = '!', .end_range = '!', .start_state = 1, .end_state = 2 };
DFARule BANG_rules[] = { BANG_rule_1 };
DFA BANG_DFA = { .rules = BANG_rules, .num_rules = ARR_SIZE(BANG_rules), .accepting_state = 2 };

#define TILDE_rule_1 = { .start_range = '~', .end_range = '~', .start_state = 1, .end_state = 2 };
DFARule TILDE_rules[] = { TILDE_rule_1 };
DFA TILDE_DFA = { .rules = TILDE_rules, .num_rules = ARR_SIZE(TILDE_rules), .accepting_state = 2 };

#define QUESTION_rule_1 = { .start_range = '?', .end_range = '?', .start_state = 1, .end_state = 2 };
DFARule QUESTION_rules[] = { QUESTION_rule_1 };
DFA QUESTION_DFA = { .rules = QUESTION_rules, .num_rules = ARR_SIZE(QUESTION_rules), .accepting_state = 2 };

#define COLON_rule_1 = { .start_range = ':', .end_range = ':', .start_state = 1, .end_state = 2 };
DFARule COLON_rules[] = { COLON_rule_1 };
DFA COLON_DFA = { .rules = COLON_rules, .num_rules = ARR_SIZE(COLON_rules), .accepting_state = 2 };

#define EQUAL_rule_1 = { .start_range = '=', .end_range = '=', .start_state = 1, .end_state = 2 };
#define EQUAL_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule EQUAL_rules[] = { EQUAL_rule_1, EQUAL_rule_2 };
DFA EQUAL_DFA = { .rules = EQUAL_rules, .num_rules = ARR_SIZE(EQUAL_rules), .accepting_state = 3 };

#define LE_rule_1 = { .start_range = '<', .end_range = '<', .start_state = 1, .end_state = 2 };
#define LE_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule LE_rules[] = { LE_rule_1, LE_rule_2 };
DFA LE_DFA = { .rules = LE_rules, .num_rules = ARR_SIZE(LE_rules), .accepting_state = 3 };

#define GE_rule_1 = { .start_range = '>', .end_range = '>', .start_state = 1, .end_state = 2 };
#define GE_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule GE_rules[] = { GE_rule_1, GE_rule_2 };
DFA GE_DFA = { .rules = GE_rules, .num_rules = ARR_SIZE(GE_rules), .accepting_state = 3 };

#define NOTEQUAL_rule_1 = { .start_range = '!', .end_range = '!', .start_state = 1, .end_state = 2 };
#define NOTEQUAL_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule NOTEQUAL_rules[] = { NOTEQUAL_rule_1, NOTEQUAL_rule_2 };
DFA NOTEQUAL_DFA = { .rules = NOTEQUAL_rules, .num_rules = ARR_SIZE(NOTEQUAL_rules), .accepting_state = 3 };

#define AND_rule_1 = { .start_range = '&', .end_range = '&', .start_state = 1, .end_state = 2 };
#define AND_rule_2 = { .start_range = '&', .end_range = '&', .start_state = 2, .end_state = 3 };
DFARule AND_rules[] = { AND_rule_1, AND_rule_2 };
DFA AND_DFA = { .rules = AND_rules, .num_rules = ARR_SIZE(AND_rules), .accepting_state = 3 };

#define OR_rule_1 = { .start_range = '|', .end_range = '|', .start_state = 1, .end_state = 2 };
#define OR_rule_2 = { .start_range = '|', .end_range = '|', .start_state = 2, .end_state = 3 };
DFARule OR_rules[] = { OR_rule_1, OR_rule_2 };
DFA OR_DFA = { .rules = OR_rules, .num_rules = ARR_SIZE(OR_rules), .accepting_state = 3 };

#define INC_rule_1 = { .start_range = '+', .end_range = '+', .start_state = 1, .end_state = 2 };
#define INC_rule_2 = { .start_range = '+', .end_range = '+', .start_state = 2, .end_state = 3 };
DFARule INC_rules[] = { INC_rule_1, INC_rule_2 };
DFA INC_DFA = { .rules = INC_rules, .num_rules = ARR_SIZE(INC_rules), .accepting_state = 3 };

#define DEC_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
#define DEC_rule_2 = { .start_range = '-', .end_range = '-', .start_state = 2, .end_state = 3 };
DFARule DEC_rules[] = { DEC_rule_1, DEC_rule_2 };
DFA DEC_DFA = { .rules = DEC_rules, .num_rules = ARR_SIZE(DEC_rules), .accepting_state = 3 };

#define ADD_rule_1 = { .start_range = '+', .end_range = '+', .start_state = 1, .end_state = 2 };
DFARule ADD_rules[] = { ADD_rule_1 };
DFA ADD_DFA = { .rules = ADD_rules, .num_rules = ARR_SIZE(ADD_rules), .accepting_state = 2 };

#define SUB_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
DFARule SUB_rules[] = { SUB_rule_1 };
DFA SUB_DFA = { .rules = SUB_rules, .num_rules = ARR_SIZE(SUB_rules), .accepting_state = 2 };

#define DIV_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
DFARule DIV_rules[] = { DIV_rule_1 };
DFA DIV_DFA = { .rules = DIV_rules, .num_rules = ARR_SIZE(DIV_rules), .accepting_state = 2 };

#define AMP_rule_1 = { .start_range = '&', .end_range = '&', .start_state = 1, .end_state = 2 };
DFARule AMP_rules[] = { AMP_rule_1 };
DFA AMP_DFA = { .rules = AMP_rules, .num_rules = ARR_SIZE(AMP_rules), .accepting_state = 2 };

#define BITOR_rule_1 = { .start_range = '|', .end_range = '|', .start_state = 1, .end_state = 2 };
DFARule BITOR_rules[] = { BITOR_rule_1 };
DFA BITOR_DFA = { .rules = BITOR_rules, .num_rules = ARR_SIZE(BITOR_rules), .accepting_state = 2 };

#define CARET_rule_1 = { .start_range = '^', .end_range = '^', .start_state = 1, .end_state = 2 };
DFARule CARET_rules[] = { CARET_rule_1 };
DFA CARET_DFA = { .rules = CARET_rules, .num_rules = ARR_SIZE(CARET_rules), .accepting_state = 2 };

#define MOD_rule_1 = { .start_range = '%', .end_range = '%', .start_state = 1, .end_state = 2 };
DFARule MOD_rules[] = { MOD_rule_1 };
DFA MOD_DFA = { .rules = MOD_rules, .num_rules = ARR_SIZE(MOD_rules), .accepting_state = 2 };

#define DEREF_ARROW_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
#define DEREF_ARROW_rule_2 = { .start_range = '>', .end_range = '>', .start_state = 2, .end_state = 3 };
DFARule DEREF_ARROW_rules[] = { DEREF_ARROW_rule_1, DEREF_ARROW_rule_2 };
DFA DEREF_ARROW_DFA = { .rules = DEREF_ARROW_rules, .num_rules = ARR_SIZE(DEREF_ARROW_rules), .accepting_state = 3 };

#define ADD_ASSIGN_rule_1 = { .start_range = '+', .end_range = '+', .start_state = 1, .end_state = 2 };
#define ADD_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule ADD_ASSIGN_rules[] = { ADD_ASSIGN_rule_1, ADD_ASSIGN_rule_2 };
DFA ADD_ASSIGN_DFA = { .rules = ADD_ASSIGN_rules, .num_rules = ARR_SIZE(ADD_ASSIGN_rules), .accepting_state = 3 };

#define SUB_ASSIGN_rule_1 = { .start_range = '-', .end_range = '-', .start_state = 1, .end_state = 2 };
#define SUB_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule SUB_ASSIGN_rules[] = { SUB_ASSIGN_rule_1, SUB_ASSIGN_rule_2 };
DFA SUB_ASSIGN_DFA = { .rules = SUB_ASSIGN_rules, .num_rules = ARR_SIZE(SUB_ASSIGN_rules), .accepting_state = 3 };

#define MUL_ASSIGN_rule_1 = { .start_range = '*', .end_range = '*', .start_state = 1, .end_state = 2 };
#define MUL_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule MUL_ASSIGN_rules[] = { MUL_ASSIGN_rule_1, MUL_ASSIGN_rule_2 };
DFA MUL_ASSIGN_DFA = { .rules = MUL_ASSIGN_rules, .num_rules = ARR_SIZE(MUL_ASSIGN_rules), .accepting_state = 3 };

#define DIV_ASSIGN_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
#define DIV_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule DIV_ASSIGN_rules[] = { DIV_ASSIGN_rule_1, DIV_ASSIGN_rule_2 };
DFA DIV_ASSIGN_DFA = { .rules = DIV_ASSIGN_rules, .num_rules = ARR_SIZE(DIV_ASSIGN_rules), .accepting_state = 3 };

#define AND_ASSIGN_rule_1 = { .start_range = '&', .end_range = '&', .start_state = 1, .end_state = 2 };
#define AND_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule AND_ASSIGN_rules[] = { AND_ASSIGN_rule_1, AND_ASSIGN_rule_2 };
DFA AND_ASSIGN_DFA = { .rules = AND_ASSIGN_rules, .num_rules = ARR_SIZE(AND_ASSIGN_rules), .accepting_state = 3 };

#define OR_ASSIGN_rule_1 = { .start_range = '|', .end_range = '|', .start_state = 1, .end_state = 2 };
#define OR_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule OR_ASSIGN_rules[] = { OR_ASSIGN_rule_1, OR_ASSIGN_rule_2 };
DFA OR_ASSIGN_DFA = { .rules = OR_ASSIGN_rules, .num_rules = ARR_SIZE(OR_ASSIGN_rules), .accepting_state = 3 };

#define XOR_ASSIGN_rule_1 = { .start_range = '^', .end_range = '^', .start_state = 1, .end_state = 2 };
#define XOR_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule XOR_ASSIGN_rules[] = { XOR_ASSIGN_rule_1, XOR_ASSIGN_rule_2 };
DFA XOR_ASSIGN_DFA = { .rules = XOR_ASSIGN_rules, .num_rules = ARR_SIZE(XOR_ASSIGN_rules), .accepting_state = 3 };

#define MOD_ASSIGN_rule_1 = { .start_range = '%', .end_range = '%', .start_state = 1, .end_state = 2 };
#define MOD_ASSIGN_rule_2 = { .start_range = '=', .end_range = '=', .start_state = 2, .end_state = 3 };
DFARule MOD_ASSIGN_rules[] = { MOD_ASSIGN_rule_1, MOD_ASSIGN_rule_2 };
DFA MOD_ASSIGN_DFA = { .rules = MOD_ASSIGN_rules, .num_rules = ARR_SIZE(MOD_ASSIGN_rules), .accepting_state = 3 };


/****************/
/* Custom Rules */
/****************/

/* IDENT */
/* First char of ident, [_a-zA-Zalpha-omegaALPHA-OMEGA] */
#define IDENT_rule_1 = { .start_range = 'a', .end_range = 'z', .start_state = 1, .end_state = 2 };
#define IDENT_rule_2 = { .start_range = 'A', .end_range = 'Z', .start_state = 1, .end_state = 2 };
#define IDENT_rule_3 = { .start_range = '_', .end_range = '_', .start_state = 1, .end_state = 2 };
#define IDENT_rule_4 = { .start_range = 0xceb1, .end_range = 0xcf89, .start_state = 1, .end_state = 2 };
#define IDENT_rule_5 = { .start_range = 0xcea9, .end_range = 0xce91, .start_state = 1, .end_state = 2 };
/* Remaining chars of ident [_a-zA-Zalpha-omegaALPHA-OMEGA0-9] */
#define IDENT_rule_6 = { .start_range = 'a', .end_range = 'z', .start_state = 2, .end_state = 2 };
#define IDENT_rule_7 = { .start_range = 'A', .end_range = 'Z', .start_state = 2, .end_state = 2 };
#define IDENT_rule_8 = { .start_range = '_', .end_range = '_', .start_state = 2, .end_state = 2 };
#define IDENT_rule_9 = { .start_range = 0xceb1, .end_range = 0xcf89, .start_state = 2, .end_state = 2 };
#define IDENT_rule_10 = { .start_range = 0xcea9, .end_range = 0xce91, .start_state = 2, .end_state = 2 };
#define IDENT_rule_11 = { .start_range = '0', .end_range = '9', .start_state = 2, .end_state = 2 };

/* Whitespace (Any amount) */
/* Start rule */
#define WS_rule_1 = { .start_range = ' ', .end_range = ' ', .start_state = 1, .end_state = 1 };
#define WS_rule_2 = { .start_range = '\t', .end_range = '\t', .start_state = 1, .end_state = 1 };
#define WS_rule_3 = { .start_range = '\r', .end_range = '\r', .start_state = 1, .end_state = 1 };
#define WS_rule_4 = { .start_range = '\n', .end_range = '\n', .start_state = 1, .end_state = 1 };

/* Multi-Line Comment */
#define ML_COMMENT_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
#define ML_COMMENT_rule_2 = { .start_range = '*', .end_range = '*', .start_state = 2, .end_state = 3 };
#define ML_COMMENT_rule_3 = { .start_range = '*', .end_range = '*', .start_state = 3, .end_state = 4 };
#define ML_COMMENT_rule_4 = { .start_range = '/', .end_range = '/', .start_state = 4, .end_state = 5 };
// Capture all but */ while inside comment
#define ML_COMMENT_rule_5 = { .start_range = 0, .end_range = NFASTATE_MAX, .start_state = 3, .end_state = 3 };

/* Single-Line Comment */
#define SL_COMMENT_rule_1 = { .start_range = '/', .end_range = '/', .start_state = 1, .end_state = 2 };
#define SL_COMMENT_rule_2 = { .start_range = '/', .end_range = '/', .start_state = 2, .end_state = 3 };
#define SL_COMMENT_rule_3 = { .start_range = '\n', .end_range = '\n', .start_state = 3, .end_state = 4 };
// Capture all but \n while inside comment
#define SL_COMMENT_rule_4 = { .start_range = 0, .end_range = NFASTATE_MAX, .start_state = 3, .end_state = 3 };

/* Import / Include */
#define IMPORT_rule_1 = { .start_range = 'i', .end_range = 'i', .start_state = 1, .end_state = 2 };
#define IMPORT_rule_2 = { .start_range = 'm', .end_range = 'i', .start_state = 2, .end_state = 3 };
#define IMPORT_rule_3 = { .start_range = 'p', .end_range = 'i', .start_state = 3, .end_state = 4 };
#define IMPORT_rule_4 = { .start_range = 'o', .end_range = 'i', .start_state = 4, .end_state = 5 };
#define IMPORT_rule_5 = { .start_range = 'r', .end_range = 'i', .start_state = 5, .end_state = 6 };
#define IMPORT_rule_6 = { .start_range = 't', .end_range = 'i', .start_state = 6, .end_state = 8 };
#define IMPORT_rule_7 = { .start_range = 'n', .end_range = 'i', .start_state = 2, .end_state = 3 };
#define IMPORT_rule_8 = { .start_range = 'c', .end_range = 'i', .start_state = 3, .end_state = 4 };
#define IMPORT_rule_9 = { .start_range = 'l', .end_range = 'i', .start_state = 4, .end_state = 5 };
#define IMPORT_rule_10 = { .start_range = 'u', .end_range = 'i', .start_state = 5, .end_state = 6 };
#define IMPORT_rule_11 = { .start_range = 'd', .end_range = 'i', .start_state = 6, .end_state = 7 };
#define IMPORT_rule_12 = { .start_range = 'e', .end_range = 'i', .start_state = 7, .end_state = 8 };




/************/
/* All DFAs */
/************/
DFA all_DFAs[] = { NATIVE_DFA, CTYPE_DFA, BOOL_DFA, CHAR_DFA, UCHAR_DFA, SHORT_DFA, USHORT_DFA, INT_DFA, UINT_DFA, LONG_DFA, FLOAT_DFA, DOUBLE_DFA, VOID_DFA, IF_DFA, ELSE_DFA, FOR_DFA, WHILE_DFA, CONTINUE_DFA, BREAK_DFA, IN_DFA, CLASS_DFA, THIS_DFA, OPERATOR_DFA, TRAIT_DFA, IMPL_DFA, ENUM_DFA, PRIVATE_DFA, PROTECTED_DFA, PUBLIC_DFA, INSTANCEOF_DFA, SIZEOF_DFA, ASSERT_DFA, TRUE_DFA, FALSE_DFA, LPAREN_DFA, RPAREN_DFA, LBRACE_DFA, RBRACE_DFA, LBRACK_DFA, RBRACK_DFA, LARROW_DFA, RARROW_DFA, SEMI_DFA, COMMA_DFA, DOT_DFA, STAR_DFA, EQUALS_DFA, LAMBDA_ARROW_DFA, BANG_DFA, TILDE_DFA, QUESTION_DFA, COLON_DFA, EQUAL_DFA, LE_DFA, GE_DFA, NOTEQUAL_DFA, AND_DFA, OR_DFA, INC_DFA, DEC_DFA, ADD_DFA, SUB_DFA, DIV_DFA, AMP_DFA, BITOR_DFA, CARET_DFA, MOD_DFA, DEREF_ARROW_DFA, ADD_ASSIGN_DFA, SUB_ASSIGN_DFA, MUL_ASSIGN_DFA, DIV_ASSIGN_DFA, AND_ASSIGN_DFA, OR_ASSIGN_DFA, XOR_ASSIGN_DFA, MOD_ASSIGN_DFA, WS_DFA, IMPORT_DFA, SL_COMMENT_DFA, ML_COMMENT_DFA, IDENT_DFA };

#endif // INCLUDE_AUTOMATA
