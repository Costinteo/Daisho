**************
* References *
**************
# Grammar for C
https://gist.github.com/arslancharyev31/c48d18d8f917ffe217a0e23eb3535957
# Grammar for Java
http://cui.unige.ch/isi/bnf/JAVA/BNFindex.html


************
* FEATURES *
************

Data types:
  bool  (as defined in stdbool.h)
  char  (int8_t)  uchar (uint8_t)
  short (int16_t) ushort (uint16_t)
  int   (int32_t) uint (uint32_t)
  long  (int64_t) ulong (uint64_t)
  float
  double
  void


Other Reserved Words:
  Access Modifiers: namespace, public, private, protected (default private)
  Control Flow: if, elif, else, for, while, break, continue, return
  Case/Switch: case, switch, default
  Exceptions: try, catch, finally, throw, throws
  Abstraction: struct, class, interface, enum, inherits, implements

  Allocation: new
  Threading: concurrent, synchronized

  Array[]
  List ([])
  Lambda expression


Basic:
  * class namespaces
      Like constexpr, but traces variable lifetimes rather than
  * import statements. 
      Everything compiles to a single file, like C.
  * lambda expressions


Tokenizer -- 
    

Preprocessor -- 
    import
    compile statements


Parser -- 
    Type identifiers (other than builtin reserved words) begin with a 
    capital letter.
    Function identifiers always have a () at the end.

AST Optimizer --
    Trace compile statements starting from leaves, and simplify.

Compiler --
    
