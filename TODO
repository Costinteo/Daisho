Thinking:
    Polymorhic Type Theory

    Generic trait system:
        Recursive validation
        Runtime vs compile time polymorphism
        Generated code (Use tracking)
    Compilation:
        Tokenize
        Substitute
        Parse modules
        Rewrite AST
        Validate modules
        Construct tables
        Cross-validate tables
        Convert types/methods
        Generate C code
        Compile C code
    Module Parser implementation:
        AST Node types?
        Maps?
    What is tracked for:
        Compilation Unit
        TopLevelDecl
    Checker Implementation:
        What parts should be checked when?


Coding:
    stilts-stdlib:
        Native:
            Circular buffer
            Use circular buffer for threadpool
            Strings
            Consistent error behavior
            Python integration can be disabled
        Stilts:
            Atomic<T>
            RWAtomic<T>
            String<T>
            UTF8String<T>
            PythonObject?

    AST workspace
    Split up sections
    apaz-libc:
        readFile macro wrap for memdebug
        List reduce()
        String to/from integral types (with error checking)
