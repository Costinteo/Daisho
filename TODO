Thinking:
    Polymorhic Type Theory

    Generic trait system:
        Recursive validation
        Runtime vs compile time polymorphism
        Generated code (Use tracking)
    Compilation:
        Tokenize
        Substitute
        Parse modules
        Rewrite AST
        Validate modules
        Construct tables
        Cross-validate tables
        Convert types/methods
        Generate C code
        Compile C code
    Module Parser implementation:
        AST Node types?
        Maps?
    What is tracked for:
        Compilation Unit
        TopLevelDecl
    Checker Implementation:
        What parts should be checked when?


Coding:
    stilts-stdlib:
        Native:
            Threadpool
            String functions
                find, findIdx, rfind, rfindIdx
                contains
                clear, resize
                split, splitFirst, splitLast
                replace, replaceFirst, replaceLast
                trim
                startsWith, endsWith
                append
                swap
                substring
                insert
                format
                toUpper, toLower
                hash
                equals
                compareto
            Consistent error behavior
            Configs
        Stilts:
            Mutex
            RWLock
            Atomic<T>
            String
            UTF8String
            PythonObject like Swift?
            Collections:
                Iterable<T> impl Collection<T>
                Iterator<T> impl Iterable<T>
                Stream<T> impl Iterator<T>
                Array<T> impl Iterable<T>
                List<T> impl Iterable<T>
                Set<T impl Hashable>
                Map<K impl Hashable, V>
                
                
                

    AST workspace
    Split up sections
    apaz-libc:
        readFile macro wrap for memdebug
        List reduce()
        String to/from integral types (with error checking)
